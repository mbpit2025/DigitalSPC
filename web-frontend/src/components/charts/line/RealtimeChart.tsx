// components/RealtimeChart.tsx
"use client";

import React, { useState, useEffect, useRef } from 'react';
import { Line } from 'react-chartjs-2';
import {
Â  Â  Chart as ChartJS,
Â  Â  CategoryScale,
Â  Â  LinearScale,
Â  Â  PointElement,
Â  Â  LineElement,
Â  Â  Title,
Â  Â  Tooltip,
Â  Â  Legend,
Â  Â  TimeScale,
Â  Â  ChartData,
Â  Â  ChartOptions,
    ChartDataset // Import ChartDataset untuk tipe spesifik
} from 'chart.js';
import 'chartjs-adapter-date-fns';
import annotationPlugin from 'chartjs-plugin-annotation'; // Tidak perlu mengimpor AnnotationOptions lagi
import Button from '@/components/ui/button/Button';

// Daftarkan komponen Chart.js yang diperlukan
ChartJS.register(
Â  Â  CategoryScale,
Â  Â  LinearScale,
Â  Â  PointElement,
Â  Â  LineElement,
Â  Â  Title,
Â  Â  Tooltip,
Â  Â  Legend,
Â  Â  TimeScale,
Â  Â  annotationPlugin
);

// --- 1. TYPE DEFINITIONS & KONFIGURASI ---

// FIX: Menghindari masalah "extends" dengan mendefinisikan tipe Line Annotation secara langsung 
// Berisi properti yang dibutuhkan oleh konfigurasi anotasi di bawah.
interface LineAnnotationOptions { 
    type: 'line';
    yMin: number;
    yMax: number;
    borderColor: string;
    borderWidth: number;
    borderDash: number[];
    label: {
        content: string;
        position: 'start' | 'end';
        backgroundColor: string;
        color: string;
    };
    // Karena Chart.js annotations dapat memiliki properti tambahan seperti 'id', 
    // kita gunakan index signature untuk kompatibilitas yang lebih luas:
    [key: string]: unknown; 
}

// ðŸ“Œ DEFINISI TIPE UNTUK PROPS STANDAR
interface StandardSet {
Â  Â  max: number;
Â  Â  min: number;
Â  Â  label: string; // Label untuk ditampilkan di chart (misalnya "Standard Hot")
Â  Â  color: string; // Warna garis
Â  Â  tagGroup: string[]; // Tag mana yang tergolong dalam standar ini (misalnya ["data1", "data2"])
}

interface RealtimeChartProps {
Â  Â  standardSettings: StandardSet[]; // Array dari standar yang berbeda
}

interface ApiDataItem {
Â  Â  tag_name: string;
Â  Â  value: number;
Â  Â  timestamp: string;
}

interface ChartPoint {
Â  Â  x: number;
Â  Â  y: number;
}

interface DataHistory {
Â  Â  [tagName: string]: ChartPoint[];
}

// DEFINISI CUSTOM LABELS
const TAG_LABELS: { [key: string]: string } = {
Â  Â  "data1": "Hot 1 Temp",
Â  Â  "data2": "Hot 2 Temp",
Â  Â  "data3": "Cold 1 Temp", 
Â  Â  "data4": "Cold 2 Temp", 
};

// Gunakan keys dari TAG_LABELS untuk menentukan tag yang akan ditampilkan
const TAGS_TO_DISPLAY: string[] = Object.keys(TAG_LABELS); 
const POLLING_INTERVAL = 3000;

const COLORS: { [key: string]: string } = {
Â  Â  "data1": 'rgb(255, 99, 132)', 
Â  Â  "data2": 'rgb(54, 162, 235)', 
Â  Â  "data3": 'rgb(255, 206, 86)', 
Â  Â  "data4": 'rgb(75, 192, 192)',
};

const fetchData = async (): Promise<ApiDataItem[]> => {
Â  Â  const apiUrl = `${process.env.API_ENDPOINT}/api/log/1`; 
Â  Â  const response = await fetch(apiUrl);
Â  Â  if (!response.ok) {
Â  Â  Â  Â  throw new Error(`Gagal mengambil data API: ${response.statusText}`);
Â  Â  }
Â  Â  const data: ApiDataItem[] = await response.json();
Â  Â  return data;
};

const processData = (apiData: ApiDataItem[], currentData: DataHistory): DataHistory => {
Â  Â  const latestDataGrouped = apiData.reduce((acc, item) => {
Â  Â  Â  Â  const tagName = item.tag_name;
Â  Â  Â  Â  if (TAGS_TO_DISPLAY.length > 0 && !TAGS_TO_DISPLAY.includes(tagName)) {
Â  Â  Â  Â  Â  Â  return acc;
Â  Â  Â  Â  }
Â  Â  Â  Â  if (!acc[tagName]) { acc[tagName] = []; }
Â  Â  Â  Â  const time = new Date(item.timestamp).getTime(); 
Â  Â  Â  Â  acc[tagName].push({ x: time, y: item.value });
Â  Â  Â  Â  return acc;
Â  Â  }, {} as DataHistory);

Â  Â  const newDataHistory: DataHistory = { ...currentData };

Â  Â  Object.keys(latestDataGrouped).forEach(tagName => {
Â  Â  Â  Â  const history = newDataHistory[tagName] ? newDataHistory[tagName].slice() : [];
Â  Â  Â  Â  const latestPoints = latestDataGrouped[tagName];
Â  Â  Â  Â  
Â  Â  Â  Â  latestPoints.forEach(newPoint => {
Â  Â  Â  Â  Â  Â  const exists = history.some(oldPoint => oldPoint.x === newPoint.x);
Â  Â  Â  Â  Â  Â  if (!exists) { history.push(newPoint); }
Â  Â  Â  Â  });

Â  Â  Â  Â  history.sort((a, b) => a.x - b.x);
Â  Â  Â  Â  newDataHistory[tagName] = history.slice(-50); 
Â  Â  });

Â  Â  return newDataHistory;
};

// --- 2. KOMPONEN UTAMA ---

// ðŸ“Œ TERIMA PROPS
export default function RealtimeChart({ standardSettings }: RealtimeChartProps) {
Â  Â  const [dataHistory, setDataHistory] = useState<DataHistory>({}); 
Â  Â  const [loading, setLoading] = useState<boolean>(true);
Â  Â  const [error, setError] = useState<string | null>(null);

    // FIX: Menggunakan 'time' untuk sumbu X
Â  Â  const chartRef = useRef<ChartJS<'line', ChartPoint[], 'time'> | null>(null);

Â  Â  // ... (Hook Polling Data tetap sama)

Â  Â  useEffect(() => {
Â  Â  Â  Â  const pollApi = async () => {
Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  const apiResponse = await fetchData();
Â  Â  Â  Â  Â  Â  Â  Â  setDataHistory(prevDataHistory => processData(apiResponse, prevDataHistory));
Â  Â  Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  } catch (err: unknown) {
Â  Â  Â  Â  Â  Â  Â  Â  const errorMessage = (err instanceof Error) ? err.message : "Terjadi kesalahan yang tidak diketahui.";
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Error fetching data:", err);
Â  Â  Â  Â  Â  Â  Â  Â  setError(errorMessage);
Â  Â  Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };
Â  Â  Â  Â  pollApi(); 
Â  Â  Â  Â  const intervalId = setInterval(pollApi, POLLING_INTERVAL);
Â  Â  Â  Â  return () => clearInterval(intervalId);
Â  Â  }, []); 

Â  Â  // =======================================================
Â  Â  // FUNGSI EKSPOR (Tetap sama)
Â  Â  // =======================================================

Â  Â  const exportChartAsImage = (format: 'png' | 'jpeg') => {
Â  Â  Â  Â  const chartInstance = chartRef.current;
Â  Â  Â  Â  if (!chartInstance) {
Â  Â  Â  Â  Â  Â  alert("Grafik belum siap.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const canvas = chartInstance.canvas;
Â  Â  Â  Â  const mimeType = format === 'png' ? 'image/png' : 'image/jpeg';
Â  Â  Â  Â  const filename = `grafik_realtime_${new Date().toISOString()}.${format}`;
Â  Â  Â  Â  
Â  Â  Â  Â  const dataURL = canvas.toDataURL(mimeType, format === 'jpeg' ? 0.9 : 1.0);
Â  Â  Â  Â  
Â  Â  Â  Â  const link = document.createElement('a');
Â  Â  Â  Â  link.href = dataURL;
Â  Â  Â  Â  link.download = filename;
Â  Â  Â  Â  document.body.appendChild(link);
Â  Â  Â  Â  link.click();
Â  Â  Â  Â  document.body.removeChild(link);
Â  Â  };

Â  Â  const exportDataAsCsv = () => {
Â  Â  Â  Â  const data = dataHistory; 
Â  Â  Â  Â  if (Object.keys(data).length === 0) {
Â  Â  Â  Â  Â  Â  alert("Tidak ada data untuk diekspor.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const allTags = Object.keys(data).sort(); 
Â  Â  Â  Â  const headerLabels = allTags.map(tag => TAG_LABELS[tag] || tag); 
Â  Â  Â  Â  const allTimestamps = new Set<number>(); 
Â  Â  Â  Â  
Â  Â  Â  Â  allTags.forEach(tag => data[tag].forEach(point => allTimestamps.add(point.x)));
Â  Â  Â  Â  const sortedTimestamps = Array.from(allTimestamps).sort((a, b) => a - b);

Â  Â  Â  Â  let csvContent = "Waktu," + headerLabels.join(",") + "\n";
Â  Â  Â  Â  
Â  Â  Â  Â  sortedTimestamps.forEach(timestamp => {
Â  Â  Â  Â  Â  Â  const timeString = new Date(timestamp).toLocaleString('id-ID'); 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const dataValues = allTags.map(tag => {
Â  Â  Â  Â  Â  Â  Â  Â  const point = data[tag].find(p => p.x === timestamp);
Â  Â  Â  Â  Â  Â  Â  Â  return point ? point.y.toFixed(2).toString() : ''; 
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  csvContent += timeString + "," + dataValues.join(",") + "\n";
Â  Â  Â  Â  });

Â  Â  Â  Â  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
Â  Â  Â  Â  const link = document.createElement('a');
Â  Â  Â  Â  link.href = URL.createObjectURL(blob);
Â  Â  Â  Â  link.download = `data_historis_${new Date().toISOString()}.csv`;
Â  Â  Â  Â  document.body.appendChild(link);
Â  Â  Â  Â  link.click();
Â  Â  Â  Â  document.body.removeChild(link);
Â  Â  };

Â  Â  // --- RENDERING & OPSIONAL CHART ---

Â  Â  // FIX: Menggunakan tipe LineAnnotationOptions yang sudah diperbaiki
Â  Â  const createAnnotations = (): Record<string, LineAnnotationOptions> => {
Â  Â  Â  Â  const annotations: Record<string, LineAnnotationOptions> = {};

Â  Â  Â  Â  standardSettings.forEach((setting, index) => {
Â  Â  Â  Â  Â  Â  // Annotation Max
Â  Â  Â  Â  Â  Â  annotations[`standardMax${index}`] = {
Â  Â  Â  Â  Â  Â  Â  Â  type: 'line',
Â  Â  Â  Â  Â  Â  Â  Â  yMin: setting.max, 
Â  Â  Â  Â  Â  Â  Â  Â  yMax: setting.max,
Â  Â  Â  Â  Â  Â  Â  Â  borderColor: setting.color || 'red', // Gunakan warna dari props
Â  Â  Â  Â  Â  Â  Â  Â  borderWidth: 2,
Â  Â  Â  Â  Â  Â  Â  Â  borderDash: [6, 6],
Â  Â  Â  Â  Â  Â  Â  Â  label: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  content: `${setting.label} Max (${setting.max})`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  position: 'end',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: setting.color.replace('rgb', 'rgba').replace(')', ', 0.5)'),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: 'white'
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Annotation Min
Â  Â  Â  Â  Â  Â  annotations[`standardMin${index}`] = {
Â  Â  Â  Â  Â  Â  Â  Â  type: 'line',
Â  Â  Â  Â  Â  Â  Â  Â  yMin: setting.min, 
Â  Â  Â  Â  Â  Â  Â  Â  yMax: setting.min,
Â  Â  Â  Â  Â  Â  Â  Â  borderColor: setting.color || 'orange', 
Â  Â  Â  Â  Â  Â  Â  Â  borderWidth: 2,
Â  Â  Â  Â  Â  Â  Â  Â  borderDash: [6, 6],
Â  Â  Â  Â  Â  Â  Â  Â  label: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  content: `${setting.label} Min (${setting.min})`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  position: 'start',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: setting.color.replace('rgb', 'rgba').replace(')', ', 0.5)'),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: 'white'
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  return annotations;
Â  Â  };


Â  Â  const chartData: ChartData<'line', ChartPoint[]> = {
Â  Â  Â  Â  // FIX: Menghapus 'as any' dan menggunakan tipe ChartDataset yang spesifik
Â  Â  Â  Â  datasets: Object.keys(dataHistory).map(tagName => {
Â  Â  Â  Â  Â  Â  const color = COLORS[tagName] || 'rgba(128, 128, 128, 1)';
Â  Â  Â  Â  Â  Â  const customLabel = TAG_LABELS[tagName] || tagName; 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const dataset: ChartDataset<'line', ChartPoint[]> = {
Â  Â  Â  Â  Â  Â  Â  Â  label: customLabel, 
Â  Â  Â  Â  Â  Â  Â  Â  data: dataHistory[tagName] || [],
Â  Â  Â  Â  Â  Â  Â  Â  borderColor: color,
Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.3)'),
Â  Â  Â  Â  Â  Â  Â  Â  fill: false, tension: 0.2, pointRadius: 3, showLine: true,
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  return dataset; 
Â  Â  Â  Â  }),
Â  Â  };

Â  Â  const options: ChartOptions<'line'> = {
Â  Â  Â  Â  responsive: true, maintainAspectRatio: false,
Â  Â  Â  Â  plugins: {
Â  Â  Â  Â  Â  Â  legend: { 
Â  Â  Â  Â  Â  Â  Â  Â  position: 'bottom' as const,
Â  Â  Â  Â  Â  Â  Â  Â  labels: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: '#FFFFFF'
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  title: { display: true, text: 'Back Part Molding Machine', color: '#FFFFFF' },
Â  Â  Â  Â  Â  Â  tooltip: { 
Â  Â  Â  Â  Â  Â  Â  Â  mode: 'index', 
Â  Â  Â  Â  Â  Â  Â  Â  intersect: false,
Â  Â  Â  Â  Â  Â  Â  Â  callbacks: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label: function(context) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  let label = context.dataset.label || '';
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (label) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label += ': ';
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (context.parsed.y !== null) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label += context.parsed.y.toFixed(2);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return label;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  // ðŸ“Œ GUNAKAN FUNGSI createAnnotations
Â  Â  Â  Â  Â  Â  annotation: {
Â  Â  Â  Â  Â  Â  Â  Â  annotations: createAnnotations()
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  },
Â  Â  Â  Â  scales: {
Â  Â  Â  Â  Â  Â  x: {
Â  Â  Â  Â  Â  Â  Â  Â  type: 'time', time: { unit: 'second', tooltipFormat: 'yyyy-MM-dd HH:mm:ss', displayFormats: { second: 'HH:mm:ss', minute: 'HH:mm' } },
Â  Â  Â  Â  Â  Â  Â  Â  title: { display: true, text: 'Waktu', color: '#BBBBBB' }, ticks: { color: '#AAAAAA' }, grid: { color: 'rgba(255, 255, 255, 0.1)' }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  y: {
Â  Â  Â  Â  Â  Â  Â  Â  title: { display: true, text: 'Value', color: '#BBBBBB' }, beginAtZero: false, 
Â  Â  Â  Â  Â  Â  Â  Â  ticks: { color: '#AAAAAA' }, grid: { color: 'rgba(255, 255, 255, 0.1)' }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  },
Â  Â  Â  Â  backgroundColor: '#1E1E2F'
Â  Â  };

Â  Â  if (loading) return <p style={{ color: '#fff' }}>Memuat data awal...</p>;
Â  Â  if (error) return <p style={{ color: 'red' }}>Error: {error}</p>;

Â  Â  const hasData = Object.keys(dataHistory).length > 0;
Â  Â  
Â  Â  return (
Â  Â  Â  Â  <div className='rounded-2xl border border-gray-200 bg-white p-5 dark:border-gray-800 dark:bg-white/[0.03] flex flex-col justify-between col-span-6 ' >
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* Kontrol Ekspor */}
Â  Â  Â  Â  Â  Â  <div style={{ display: 'flex', gap: '10px' }} className='absolute'>
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant='outline' size='xs' onClick={exportDataAsCsv} Â className='text-green'>CSV</Button>
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant='outline' size='xs' onClick={() => exportChartAsImage('png')}>PNG</Button>
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant='outline' size='xs' onClick={() => exportChartAsImage('jpeg')}>JPG</Button>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Area Grafik */}
Â  Â  Â  Â  Â  Â  <div style={{ width: '100%', height: '500px' }}>
Â  Â  Â  Â  Â  Â  Â  {!hasData && !loading ? (
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ color: '#fff' }}>Tidak ada data yang tersedia.</p>
Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <Line 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ref={chartRef}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  data={chartData} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  options={options} 
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
}